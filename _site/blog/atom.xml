<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

	<title>Ali Fertah</title>
	<link href="http://alifertah.github.io/blog/atom.xml" rel="self"/>
	<link href="http://alifertah.github.io/blog"/>
	<updated>2024-05-22T16:45:41+01:00</updated>
	<id>http://alifertah.github.io/blog</id>
	<author>
		<name>Ali Fertah</name>
		<email>alfertah@student.1337.ma</email>
	</author>

	
		<entry>
			<title>Born 2 Be Root</title>
			<link href="http://alifertah.github.io/2022/10/17/born-2-be-root.html"/>
			<updated>2022-10-17T00:00:00+01:00</updated>
			<id>http://alifertah.github.io/2022/10/17/born-2-be-root</id>
			<content type="html">&lt;h1 id=&quot;born2beroot&quot;&gt;Born2beroot&lt;/h1&gt;

&lt;h2 id=&quot;42-school-project&quot;&gt;42 school project&lt;/h2&gt;

&lt;h1 id=&quot;1-installation&quot;&gt;1. Installation&lt;/h1&gt;

&lt;p&gt;The installation guide is at the end of the article.&lt;/p&gt;

&lt;h1 id=&quot;2-configuration&quot;&gt;2. Configuration&lt;/h1&gt;

&lt;h2 id=&quot;21-installing-sudo&quot;&gt;2.1. Installing sudo&lt;/h2&gt;

&lt;p&gt;Login as root&lt;/p&gt;

&lt;p&gt;$ su -&lt;/p&gt;

&lt;p&gt;Install sudo&lt;/p&gt;

&lt;p&gt;$ apt-get update -y&lt;br /&gt;
$ apt-get upgrade -y&lt;br /&gt;
$ apt install sudo&lt;/p&gt;

&lt;p&gt;Adding user in sudo group&lt;/p&gt;

&lt;p&gt;$ su -&lt;br /&gt;
$ usermod -aG sudo your_username&lt;/p&gt;

&lt;p&gt;Check if user is in sudo group&lt;/p&gt;

&lt;p&gt;$ getent group sudo&lt;/p&gt;

&lt;p&gt;Give privilege as a su.&lt;/p&gt;

&lt;p&gt;Open sudoers file:&lt;/p&gt;

&lt;p&gt;$ sudo visudo&lt;/p&gt;

&lt;p&gt;Add this line in file:&lt;/p&gt;

&lt;p&gt;your_username    ALL=(ALL) ALL&lt;/p&gt;

&lt;h2 id=&quot;22-installing-tools&quot;&gt;2.2. Installing tools&lt;/h2&gt;

&lt;p&gt;Installing git&lt;/p&gt;

&lt;p&gt;$ apt-get update -y&lt;br /&gt;
$ apt-get upgrade -y&lt;br /&gt;
$ apt-get install git -y&lt;/p&gt;

&lt;p&gt;Check git version&lt;/p&gt;

&lt;p&gt;$ git –version&lt;/p&gt;

&lt;p&gt;Installing wget  &lt;em&gt;(wget is a free and open source tool for downloading files from web repositories.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;$ sudo apt-get install wget&lt;/p&gt;

&lt;p&gt;Installing Vim&lt;/p&gt;

&lt;p&gt;$ sudo apt-get install vim&lt;/p&gt;

&lt;p&gt;Installing Oh my zsh (because it is easier to use)&lt;/p&gt;

&lt;p&gt;$ sudo apt-get install zsh&lt;br /&gt;
$ zsh –version&lt;br /&gt;
$ sh -c “$(wget &lt;a href=&quot;https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh&quot;&gt;https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh&lt;/a&gt; -O -)”&lt;/p&gt;

&lt;h2 id=&quot;23-installing-ssh-and-configuring-ssh-service&quot;&gt;2.3. Installing SSH and configuring SSH service&lt;/h2&gt;

&lt;p&gt;$ sudo apt-get update&lt;br /&gt;
$ sudo apt install openssh-server&lt;/p&gt;

&lt;p&gt;Check the SSH server status&lt;/p&gt;

&lt;p&gt;$ sudo systemctl status ssh&lt;/p&gt;

&lt;p&gt;Restart the SSH service&lt;/p&gt;

&lt;p&gt;$ service ssh restart&lt;/p&gt;

&lt;p&gt;Changing default port (22) to 4242&lt;/p&gt;

&lt;p&gt;$ sudo nano &lt;em&gt;/etc/ssh/sshd_config&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Edit the file change the line #Port22 to Port 4242&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Find thid line:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;#Port 22&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Change it like this:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Port 4242&lt;/p&gt;

&lt;p&gt;Check if port settings got right&lt;/p&gt;

&lt;p&gt;$ sudo grep Port /etc/ssh/sshd_config&lt;/p&gt;

&lt;p&gt;Restart the SSH service&lt;/p&gt;

&lt;p&gt;$ sudo service ssh restart&lt;/p&gt;

&lt;h2 id=&quot;24-installing-and-configuring-ufw-uncomplicated-firewall&quot;&gt;2.4. Installing and configuring UFW (Uncomplicated Firewall)&lt;/h2&gt;

&lt;p&gt;Install UFW&lt;/p&gt;

&lt;p&gt;$ apt-get install ufw&lt;/p&gt;

&lt;p&gt;Enable&lt;/p&gt;

&lt;p&gt;$ sudo ufw enable&lt;/p&gt;

&lt;p&gt;Check the status&lt;/p&gt;

&lt;p&gt;$ sudo ufw status numbered&lt;/p&gt;

&lt;p&gt;Configure the rules&lt;/p&gt;

&lt;p&gt;$ sudo ufw allow ssh&lt;/p&gt;

&lt;p&gt;Configure the port rules&lt;/p&gt;

&lt;p&gt;$ sudo ufw allow 4242&lt;/p&gt;

&lt;p&gt;Delete the new rule: (This is for when you defend your Born2beroot)&lt;/p&gt;

&lt;p&gt;$ sudo ufw status numbered&lt;br /&gt;
$ sudo ufw delete (that number, for example 5 or 6)&lt;/p&gt;

&lt;h2 id=&quot;25-connecting-ssh-server&quot;&gt;2.5. Connecting SSH server&lt;/h2&gt;

&lt;p&gt;Add forward rule for VirtualBox&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Go to VirtualBox-&amp;gt; Choose the VM-&amp;gt;Select Settings&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Choose “Network”-&amp;gt; “Adapter 1”-&amp;gt;”Advanced”-&amp;gt;”Port Forwarding”&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/671/1*rCj_FeuZ5Rm2abz48qhulg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Enter the values as shown:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*61-KSUCFcerO1wPqBcYISg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Restart SSH server (go to the your VM machine)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;$ sudo systemctl restart ssh&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Check ssh status:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;$ sudo service sshd status&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;From host side from iTerm2 or Terminal enter as shown below:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;$ ssh your_username@127.0.0.1 -p 4242&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Quit the connection:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;$ exit&lt;/p&gt;

&lt;h2 id=&quot;26-set-password-policy-source&quot;&gt;2.6. Set password policy (&lt;a href=&quot;https://ostechnix.com/how-to-set-password-policies-in-linux/&quot;&gt;source&lt;/a&gt;)&lt;/h2&gt;

&lt;p&gt;This setting enforces how many classes, i.e upper-case, lower-case, and other characters, should be in a password, also the length of the password.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“To set up a strong password policy, you have to comply with the following requirements:&lt;/p&gt;

  &lt;p&gt;• Your password must be at least 10 characters long. It must contain an uppercase letter and a number. Also, it must not contain more than 3 consecutive identical characters. 6 Born2beRoot&lt;/p&gt;

  &lt;p&gt;Your password has to expire every 30 days.&lt;/p&gt;

  &lt;p&gt;• The minimum number of days allowed before the modification of a password will be set to 2.&lt;/p&gt;

  &lt;p&gt;• The user has to receive a warning message 7 days before their password expires.&lt;/p&gt;

  &lt;p&gt;• The password must not include the name of the user.&lt;/p&gt;

  &lt;p&gt;• The following rule does not apply to the root password: The password must have at least 7 characters that are not part of the former password.&lt;/p&gt;

  &lt;p&gt;• Of course, your root password has to comply with this policy.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Installing password quality checking library (libpam-pwquality):&lt;/p&gt;

&lt;p&gt;$ sudo apt-get install libpam-pwquality&lt;/p&gt;

&lt;p&gt;Change the length&lt;/p&gt;

&lt;p&gt;$ sudo nano /etc/pam.d/common-password&lt;/p&gt;

&lt;p&gt;Find the following line:&lt;/p&gt;

&lt;p&gt;password [success=2 default=ignore] pam_unix.so obscure sha512&lt;/p&gt;

&lt;p&gt;And add an extra word: minlen=10 at the end.&lt;/p&gt;

&lt;p&gt;password [success=2 default=ignore] pam_unix.so obscure sha512 minlen=10&lt;/p&gt;

&lt;p&gt;To set at least one upper-case letter in the password, add a word ‘&lt;strong&gt;ucredit=-1&lt;/strong&gt;’ at the end of the following line.&lt;/p&gt;

&lt;p&gt;Find this line:&lt;/p&gt;

&lt;p&gt;password    requisite         pam_pwquality.so retry=3&lt;/p&gt;

&lt;p&gt;Add these values (min lower-case 1 letter, min upper-case 1 letter, min digit 1, max same letter repetition 3, whether to check if the password contains the user name in some form (enabled if the value is not 0), the minimum number of characters that must be different from the old password=7, enforce_for_root: same policy for root users):&lt;/p&gt;

&lt;p&gt;password    requisite         pam_pwquality.so retry=3 &lt;strong&gt;lcredit =-1&lt;/strong&gt; &lt;strong&gt;ucredit=-1 dcredit=-1 maxrepeat=3 usercheck=0 difok=7 enforce_for_root&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It will look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*kEDIaQbWGJqO_JbDpPMZgw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;/etc/pam.d/common-password&lt;/p&gt;

&lt;p&gt;Password expiration:&lt;/p&gt;

&lt;p&gt;$ sudo nano /etc/login.defs&lt;/p&gt;

&lt;p&gt;Find this part&lt;/p&gt;

&lt;p&gt;PASS_MAX_DAYS 9999&lt;br /&gt;
PASS_MIN_DAYS 0&lt;br /&gt;
PASS_WARN_AGE 7&lt;/p&gt;

&lt;p&gt;Change it like this:(max 30 days, min number of days(2) allowed before the modification, receive a notification before expiration at least 7 days before)&lt;/p&gt;

&lt;p&gt;PASS_MAX_DAYS 30&lt;br /&gt;
PASS_MIN_DAYS 2&lt;br /&gt;
PASS_WARN_AGE 7&lt;/p&gt;

&lt;p&gt;Reboot the change affects:&lt;/p&gt;

&lt;p&gt;$ sudo reboot&lt;/p&gt;

&lt;h2 id=&quot;27-create-group&quot;&gt;2.7. Create group&lt;/h2&gt;

&lt;p&gt;$ sudo groupadd user42&lt;br /&gt;
$ sudo groupadd evaluating&lt;/p&gt;

&lt;p&gt;Check if group created:&lt;/p&gt;

&lt;p&gt;$ getent group&lt;/p&gt;

&lt;h2 id=&quot;28-create-user-and-assign-into-group&quot;&gt;2.8. Create user and assign into group&lt;/h2&gt;

&lt;p&gt;Check the all local users:&lt;/p&gt;

&lt;p&gt;$ cut -d: -f1 /etc/passwd&lt;/p&gt;

&lt;p&gt;Create the user&lt;/p&gt;

&lt;p&gt;$ sudo adduser &lt;em&gt;new_username&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Assign an user into “evaluating” group (This is for when you defend)&lt;/p&gt;

&lt;p&gt;$ sudo usermod -aG user42 your_username&lt;br /&gt;
$ sudo usermod -aG evaluating your_new_username&lt;/p&gt;

&lt;p&gt;Check if the user is in group&lt;/p&gt;

&lt;p&gt;$ getent group user42&lt;br /&gt;
$ getent group evaluating&lt;/p&gt;

&lt;p&gt;Check which groups user account belongs:&lt;/p&gt;

&lt;p&gt;$ groups&lt;/p&gt;

&lt;p&gt;Check if password rules working in users:&lt;/p&gt;

&lt;p&gt;$ chage -l your_new_username&lt;/p&gt;

&lt;h2 id=&quot;29-configuring-sudoers-group&quot;&gt;2.9. Configuring sudoers group&lt;/h2&gt;

&lt;p&gt;Go to file:&lt;/p&gt;

&lt;p&gt;$ sudo nano /etc/sudoers&lt;/p&gt;

&lt;p&gt;Add following for authentication using sudo has to be limited to 3 attempts in the event of an incorrect password:&lt;/p&gt;

&lt;p&gt;Defaults     secure_path=”…”&lt;br /&gt;
Defaults     passwd_tries=3&lt;/p&gt;

&lt;p&gt;For wrong password warning message, add:&lt;/p&gt;

&lt;p&gt;Defaults     badpass_message=”Password is wrong, please try again!”&lt;/p&gt;

&lt;p&gt;Each action log file has to be saved in the /var/log/sudo/ folder:&lt;/p&gt;

&lt;p&gt;(If there is no “/var/log/sudo” folder, create the sudo folder inside of “/var/log”)&lt;/p&gt;

&lt;p&gt;Defaults	logfile=”/var/log/sudo/sudo.log”&lt;br /&gt;
Defaults	log_input,log_output&lt;/p&gt;

&lt;p&gt;Require tty: (&lt;em&gt;Why use tty? If some non-root code is exploited (a PHP script, for example), the&lt;/em&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_requiretty_&lt;/code&gt; &lt;em&gt;option means that the exploit code won’t be able to directly upgrade its privileges by running&lt;/em&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_sudo_&lt;/code&gt;&lt;em&gt;.&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;Defaults        requiretty&lt;/p&gt;

&lt;p&gt;For security reasons too, the paths that can be used by sudo must be restricted. Example : /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin&lt;/p&gt;

&lt;p&gt;(It was already set there)&lt;/p&gt;

&lt;p&gt;Defaults   &lt;em&gt;secure_path=”&lt;/em&gt;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin”&lt;/p&gt;

&lt;p&gt;Now my /etc/sudoers file looks like this&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*N4Ad-9k0vfvnWKNC5q6MjQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;210-change-hostname-this-is-for-when-you-defend&quot;&gt;2.10. Change hostname (!!!This is for when you defend!!!)&lt;/h2&gt;

&lt;p&gt;Check current hostname&lt;/p&gt;

&lt;p&gt;$ hostnamectl&lt;/p&gt;

&lt;p&gt;Change the hostname&lt;/p&gt;

&lt;p&gt;$ hostnamectl set-hostname new_hostname&lt;/p&gt;

&lt;p&gt;Change /etc/hosts file&lt;/p&gt;

&lt;p&gt;$ sudo nano /etc/hosts&lt;/p&gt;

&lt;p&gt;Change old_hostname with new_hostname:&lt;/p&gt;

&lt;p&gt;127.0.0.1       localhost&lt;br /&gt;
127.0.0.1       new_hostname&lt;/p&gt;

&lt;p&gt;Reboot and check the change&lt;/p&gt;

&lt;p&gt;$ sudo reboot&lt;/p&gt;

&lt;h2 id=&quot;211-crontab-configuration&quot;&gt;2.11. Crontab configuration&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;“A  &lt;strong&gt;crontab&lt;/strong&gt;  file contains instructions for the cron(8) daemon in the following simplified manner: “run this command at this time on this date”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;Install the netstat tools&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;$ sudo apt-get update -y&lt;br /&gt;
$ sudo apt-get install -y net-tools&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Place monitoring.sh in /usr/local/bin/&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;#!/bin/bash&lt;br /&gt;
wall $’#Architecture: ‘ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hostnamectl | grep &quot;Operating System&quot; | cut -d &apos; &apos; -f5- &lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;awk -F&apos;:&apos; &apos;/^model name/ {print $2}&apos; /proc/cpuinfo | uniq | sed -e &apos;s/^[ \t]*//&apos;&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arch&lt;/code&gt; \&lt;br /&gt;
$’\n#CPU physical: ‘&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat /proc/cpuinfo | grep processor | wc -l&lt;/code&gt; \&lt;br /&gt;
$’\n#vCPU:  ‘&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat /proc/cpuinfo | grep processor | wc -l&lt;/code&gt; \&lt;br /&gt;
$’\n’&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;free -m | awk &apos;NR==2{printf &quot;#Memory Usage: %s/%sMB (%.2f%%)&quot;, $3,$2,$3*100/$2 }&apos;&lt;/code&gt; \&lt;br /&gt;
$’\n’&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;df -h | awk &apos;$NF==&quot;/&quot;{printf &quot;#Disk Usage: %d/%dGB (%s)&quot;, $3,$2,$5}&apos;&lt;/code&gt; \&lt;br /&gt;
$’\n’&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;top -bn1 | grep load | awk &apos;{printf &quot;#CPU Load: %.2f\n&quot;, $(NF-2)}&apos;&lt;/code&gt; \&lt;br /&gt;
$’\n#Last boot: ‘ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;who -b | awk &apos;{print $3&quot; &quot;$4&quot; &quot;$5}&apos;&lt;/code&gt; \&lt;br /&gt;
$’\n#LVM use: ‘ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lsblk |grep lvm | awk &apos;{if ($1) {print &quot;yes&quot;;exit;} else {print &quot;no&quot;} }&apos;&lt;/code&gt; \&lt;br /&gt;
$’\n#Connection TCP:’ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;netstat -an | grep ESTABLISHED |  wc -l&lt;/code&gt; \&lt;br /&gt;
$’\n#User log: ‘ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;who | cut -d &quot; &quot; -f 1 | sort -u | wc -l&lt;/code&gt; \&lt;br /&gt;
$’\nNetwork: IP ‘ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hostname -I&lt;/code&gt;”(“&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip a | grep link/ether | awk &apos;{print $2}&apos;&lt;/code&gt;”)” \&lt;br /&gt;
$’\n#Sudo:  ‘ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grep &apos;sudo &apos; /var/log/auth.log | wc -l&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Add the rule that script would execute without sudo password:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Open sudoers file:&lt;/p&gt;

&lt;p&gt;$ sudo visudo&lt;/p&gt;

&lt;p&gt;Add this line:&lt;/p&gt;

&lt;p&gt;your_username ALL=(ALL) NOPASSWD: /usr/local/bin/monitoring.sh&lt;/p&gt;

&lt;p&gt;sudoers will look like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*l-7LtAqCon1gRkV3dY3qiQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;sudoers&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Reboot&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;$ sudo reboot&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Execute the script as su:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;$ sudo /usr/local/bin/monitoring.sh&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open crontab and add the rule:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;$ sudo crontab -u root -e&lt;/p&gt;

&lt;p&gt;Add at end as follows: (*/10 means every 10 mins the script will show)&lt;/p&gt;

&lt;p&gt;*/10 * * * * /usr/local/bin/monitoring.sh&lt;/p&gt;

&lt;p&gt;#Tips&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;If you have this error when you reboot your VM, change the Display settings in your VirtualBox settings. See the solution  &lt;a href=&quot;https://unix.stackexchange.com/questions/502540/why-does-drmvmw-host-log-vmwgfx-error-failed-to-send-host-log-message-sh&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;$ drm:vmw_host_log &lt;em&gt;ERROR&lt;/em&gt; Failed to send host log message.&lt;/p&gt;

&lt;h1 id=&quot;3-defense&quot;&gt;3. Defense&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;The basic difference of CentOS and Debian is shown as below.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/482/1*EUhkzOMoiT_KEF3j402O6g.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is from  &lt;a href=&quot;https://1gbits.com/blog/debian-vs-centos-comparison/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;What is the difference between aptitude and apt?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;“Apart from main difference being that  &lt;strong&gt;Aptitude&lt;/strong&gt;  is a high-level package manager while  &lt;strong&gt;APT&lt;/strong&gt;  is lower-level package manager which can be used by other higher-level package managers, other main highlights that separate these two package managers are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Aptitude&lt;/strong&gt;  is vaster in functionality than  &lt;strong&gt;apt-get&lt;/strong&gt;  and integrates functionalities of apt-get and its other variants including  &lt;strong&gt;apt-mark&lt;/strong&gt;  and  &lt;strong&gt;apt-cache&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While  &lt;strong&gt;apt-get&lt;/strong&gt;  handles all the package installation, up-gradation, system-upgradation, purging package, resolving dependencies etc., Aptitude handles lot more stuff than apt, including functionalities of  &lt;strong&gt;apt-mark&lt;/strong&gt;  and  &lt;strong&gt;apt-cache&lt;/strong&gt;  i.e. searching for a package in list of installed packages, marking a package to be automatically or manually installed, holding a package making it unavailable for up-gradation and so on.” (&lt;a href=&quot;https://www.tecmint.com/difference-between-apt-and-aptitude/&quot;&gt;source&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*vRgjWvlyZsTHhO3_4Qsvlg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.oreilly.com/library/view/implementing-devops-with/9781787120532/8dfaa49e-7885-48f1-8d71-a3535c90aff8.xhtml&quot;&gt;source&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Difference between SELinux and APPArmor?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;“These security systems provide tools to isolate applications from each other and in turn isolate an attacker from the rest of the system when an application is compromised.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SELinux&lt;/strong&gt;  rule sets are incredibly complex but with this complexity you have more control over how processes are isolated. Generating these policies  &lt;a href=&quot;http://magazine.redhat.com/2007/08/21/a-step-by-step-guide-to-building-a-new-selinux-policy-module/&quot;&gt;can be automated&lt;/a&gt;. A strike against this security system is that its very difficult to independently verify.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AppArmor&lt;/strong&gt;  (and SMACK) is very straight forward. The profiles can be hand written by humans, or generated using  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aa-logprof&lt;/code&gt;. AppArmor uses path based control, making the system more transparent so it can be independently verified.” (&lt;a href=&quot;https://security.stackexchange.com/questions/29378/comparison-between-apparmor-and-selinux&quot;&gt;source&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*wJLXOmrC5eJg_kLZakN9Fg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.slideshare.net/albertspijkers/apparmor-overview-23108025&quot;&gt;source&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;1-installation-1&quot;&gt;1. Installation&lt;/h1&gt;

&lt;p&gt;If you already have installed the OS, you can skip this part.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;Get the Debian installer image from  &lt;a href=&quot;https://cdimage.debian.org/debian-cd/current/amd64/iso-cd/&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;ISO The&lt;/em&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_netinst_&lt;/code&gt; &lt;em&gt;CD is a small CD image that contains just the core Debian installer code and a small core set of text-mode programs (known as “standard” in Debian).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I chose the standard debian-10.10.0-amd64-netinst.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://cdimage.debian.org/debian-cd/current/amd64/iso-cd/&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;index-of-debian-cdcurrentamd64iso-cd&quot;&gt;Index of /debian-cd/current/amd64/iso-cd&lt;/h2&gt;

&lt;h3 id=&quot;these-are-files-containing-the-installer-and-other-software-for-the-debian-gnulinux-operating-system-the-files-in&quot;&gt;These are files containing the installer and other software for the Debian GNU/Linux operating system. The files in…&lt;/h3&gt;

&lt;p&gt;cdimage.debian.org&lt;/p&gt;

&lt;p&gt;Put the image in sgoinfre (/sgoinfre/goinfre/Perso/your_login) if you are installing at school.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Choose “Save link as” and open the folder as above (sgoinfre…).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;Installing the Debian 10.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*tkjZEbnHKqPGN24HQw_kRA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Choose ”New”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/678/1*WyFDl98AZfft999XCKD6kA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you are installing at school environment, choose “sgoinfre”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/675/1*SoVNIKT340ARlLvQ7RuwDA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select all as default&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/674/1*PzVboJLyLTs7qJmgbdoBYA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/694/1*6_D9jIyOW0jE3a6vF_UzXg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/697/1*HagpR-UD0HWCb7zRTeSQXQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*rYdYJbPswCVCUa5pwKcRZA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*V2wtat5wJyBjSEoXatkG0A.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Choose “Settings”-&amp;gt;”Storage”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/646/1*je75kGWjXl0M6PlqEzHgoA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click on Optical Drive’s far right blue small box&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*VDy31g0tePnUOuJ1cZQsxQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Choose a ISO image that you already have download&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*FOldzHFaQ2JS_phe6z6T4g.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*Evj7Z2EOq102A1zUVgUnQg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*Yg53c1-01g4VzTqhcVEEcA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click “Start” green arrow to start the VM&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/638/1*-tV-M-4g6MH8h6pWJ27bCg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Choose “Install”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*xeb8quQ-ccd5X51d8ToZRw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*WixFq3GJF9OjeH-zTBTN7Q.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*zKUk6R9tls_jiyY81ue8kA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*r0fzgkzXOjK2DfsBCh7wEQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Enter the hostname as your login+42&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*81XjZBZg2bbNXunuxgnFPQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Leave it as default&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*ft498oj7syh4zVjI48U_tw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*rhJWnMKN0TPBZwqRey9OeQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*fJFibR-WkevpF3fLwyZiag.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*z4BtcP_BS8UmUzbZNgcCqA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*2i7svoURih_UIlRJ87rj5w.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*CsSx-ALmn8mMxvWicsNVAQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*BTLz5sT6noL_SVQ7eq3u-A.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*r5zFPA7R_9BtIqwyOpCCVw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*NHdo3JbApICz0Co2epPLFA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*KHmnCUJUWhf1minIdHNS4g.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*B0QL-gX7rZW5-RJyTD1uWw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*xE1owXa0ttpvcioaEwnutA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*SUFMu-qy3rBwIe9B0Bq3kg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*yfXpHyGD37OGAOX7qs1Avw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*Mfb1YHt4K3pZJ12TF2dXAw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*vqV-bN3zDMqTBAKz_u548w.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*bLnFC6MebhW1-YZlI2n9_A.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*e08pS8shLNmhZuFUrmuBwA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Leave it blank&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*1I6fHG3MHuovrarqj9PNnA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*lGsuAQEwT0WBhb4kdUMp9g.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Deselect “SSH server”, “standard system utilities”. We’ll install it later manually.(To deselect, just hit SPACE key)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*b2qXPye_kX8EudSvbO4yww.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*s3S7D1c1t98nowFfDvJfgg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*riuXLYYgESxdq-lpkivFXQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/651/1*aLyQeWzQ1etZHbQVQepjBA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/628/1*frU-8y-PY8aUFo70AGApHw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*FlHR1WFfu-Hwmspd2WXNGA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Enter your encryption password&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*5ynsRmWt6HteSbOWYPxeZw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;login as your_username&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*Y_bimgjp7w49TR4hek3n3g.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Run “lsblk” to see the partition&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>sar</title>
			<link href="http://alifertah.github.io/school/2022/10/03/sar.html"/>
			<updated>2022-10-03T00:00:00+01:00</updated>
			<id>http://alifertah.github.io/school/2022/10/03/sar</id>
			<content type="html">&lt;h1 id=&quot;sar-writeup&quot;&gt;sar writeup&lt;/h1&gt;

&lt;h3 id=&quot;this-gonna-be-a-small-writeup-for-only-the-important-steps&quot;&gt;this gonna be a small writeup for only the important steps&lt;/h3&gt;

&lt;p&gt;we found that there is a hidden file
&lt;img src=&quot;/blog/sar/hiddenfile.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;this file shows us some informations that could help us
lets google the service name and version
&lt;img src=&quot;/blog/sar/revshell.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;we found a repo that could help us to revershell in github
after taking the revershell now m going to use a revshell repo
and upload an important file
&lt;img src=&quot;/blog/sar/gettherevfilephp.png&quot; alt=&quot;&quot; /&gt;
now we’ve been uploaded the rev.php and edited the write.sh
and make it run the rev.php to get the revershell
we did that because the finally.sh runs the write.sh and
the sudo runs the finally.sh 
&lt;img src=&quot;/blog/sar/done.png&quot; alt=&quot;&quot; /&gt;
after that we are in as a root so we got ourflag there&lt;/p&gt;

&lt;h1 id=&quot;sorry-for-this-very-short-writeup&quot;&gt;sorry for this very short writeup&lt;/h1&gt;
</content>
		</entry>
	
		<entry>
			<title>writeup</title>
			<link href="http://alifertah.github.io/school/2022/10/02/boxwriteup.html"/>
			<updated>2022-10-02T00:00:00+01:00</updated>
			<id>http://alifertah.github.io/school/2022/10/02/boxwriteup</id>
			<content type="html">&lt;h1 id=&quot;infosec-prep-oscp&quot;&gt;InfoSec Prep: OSCP&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/blog/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;first-of-all-we-need-to-innumerate-the-machine&quot;&gt;first of all we need to innumerate the machine&lt;/h2&gt;
&lt;p&gt;here we r going to use the nmap scan
&lt;img src=&quot;/blog/nmap_first.png&quot; alt=&quot;&quot; /&gt;
we we found that there is an open port with ssh&lt;/p&gt;
&lt;h2 id=&quot;now-we-r-going-to-see-some-basic-things&quot;&gt;now we r going to see some basic things&lt;/h2&gt;
&lt;p&gt;lets take a look at /robots.txt
&lt;img src=&quot;/blog/2.png&quot; alt=&quot;&quot; /&gt;
boom we found that there is a hidden file called secret
&lt;img src=&quot;/blog/3.png&quot; alt=&quot;&quot; /&gt;
its obvious that its a base 64 encryption
so we r going to encrypt it
&lt;img src=&quot;/blog/4.png&quot; alt=&quot;&quot; /&gt;
it contains an ssh private key
now we have the ssh private key so we need its user to connect with the machine using ssh
on the main page of the website we find that someone mentioned the user “oscp”
&lt;img src=&quot;/blog/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;now-we-will-try-to-connect-the-machine&quot;&gt;now we will try to connect the machine&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/blog/6.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/blog/dkhlna.png&quot; alt=&quot;&quot; /&gt;
ouah! we’r in
we are not root so we have to try to be root
I’m going to run my favorite script written by my dear friend MZA7A to find all vulnerabilities
and sus files
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl -L https://github.com/carlospolop/PEASS-ng/releases/latest/download/linpeas.sh | sh&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I have tried to exploit those vulnerabilities but i didn’t get anything so
let’s take a look at the sus files 
&lt;img src=&quot;/blog/susfile.png&quot; alt=&quot;&quot; /&gt;
we see that file in /usr/bin/ called “bash” with its yellow color and we see that bash has some interesting permissions set
the file is called bash so lets open the bash man and try to understand well
&lt;img src=&quot;/blog/-pf.png&quot; alt=&quot;&quot; /&gt;
this “-p” could help us&lt;/p&gt;
&lt;h3 id=&quot;suid&quot;&gt;SUID&lt;/h3&gt;
&lt;p&gt;Set owner User ID
it runs with the suid bit set and may be exploited to access the file system or maintain access with elevated privileges working as a suid  backdoor if it’s used to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sh -p&lt;/code&gt; omit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-p&lt;/code&gt; arguments on systems like Debian that allows the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sh&lt;/code&gt; to run with SUID privileges&lt;/p&gt;
&lt;h2 id=&quot;lets-run-this-command-usrbinbash--p&quot;&gt;lets run this command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/bin/bash -p&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/blog/done.png&quot; alt=&quot;&quot; /&gt;
we are root now and we got the flag&lt;/p&gt;
</content>
		</entry>
	
		<entry>
			<title>Push Swap</title>
			<link href="http://alifertah.github.io/2022/06/27/push-swap.html"/>
			<updated>2022-06-27T00:00:00+01:00</updated>
			<id>http://alifertah.github.io/2022/06/27/push-swap</id>
			<content type="html">&lt;h1 id=&quot;blog-removed&quot;&gt;blog removed&lt;/h1&gt;
</content>
		</entry>
	
		<entry>
			<title>C programming</title>
			<link href="http://alifertah.github.io/2022/06/17/C-programming.html"/>
			<updated>2022-06-17T00:00:00+01:00</updated>
			<id>http://alifertah.github.io/2022/06/17/C-programming</id>
			<content type="html">&lt;h1 id=&quot;many-of-the-c-projects-that-exist-today-were-started-decades-ago&quot;&gt;Many of the C projects that exist today were started decades ago.&lt;/h1&gt;

&lt;p&gt;The UNIX operating system’s development started in 1969, and its code was rewritten in C in 1972. The C language was actually created to move the UNIX kernel code from assembly to a higher level language, which would do the same tasks with fewer lines of code.&lt;/p&gt;

&lt;p&gt;Oracle database development started in 1977, and its code was rewritten from assembly to C in 1983. It became one of the most popular databases in the world.&lt;/p&gt;

&lt;p&gt;In 1985 Windows 1.0 was released. Although Windows source code is not publicly available, it’s been stated that its kernel is mostly written in C, with some parts in assembly. Linux kernel development started in 1991, and it is also written in C. The next year, it was released under the GNU license and was used as part of the GNU Operating System. The GNU operating system itself was started using C and Lisp programming languages, so many of its components are written in C.&lt;/p&gt;

&lt;p&gt;But C programming isn’t limited to projects that started decades ago, when there weren’t as many programming languages as today. Many C projects are still started today; there are some good reasons for that.&lt;/p&gt;

&lt;h2 id=&quot;how-is-the-world-powered-by-c&quot;&gt;How is the World Powered by C?&lt;/h2&gt;

&lt;p&gt;Despite the prevalence of higher-level languages, C continues to empower the world. The following are some of the systems that are used by millions and are programmed in the C language.&lt;/p&gt;

&lt;h2 id=&quot;microsoft-windows&quot;&gt;Microsoft Windows&lt;/h2&gt;

&lt;p&gt;Microsoft’s Windows kernel is developed mostly in C, with some parts in assembly language. For decades, the world’s most used operating system, with about 90 percent of the market share, has been powered by a kernel written in C.&lt;/p&gt;

&lt;h2 id=&quot;linux&quot;&gt;Linux&lt;/h2&gt;

&lt;p&gt;Linux is also written mostly in C, with some parts in assembly. About 97 percent of the world’s 500 most powerful supercomputers run the Linux kernel. It is also used in many personal computers.&lt;/p&gt;

&lt;h2 id=&quot;mac&quot;&gt;Mac&lt;/h2&gt;

&lt;p&gt;Mac computers are also powered by C, since the OS X kernel is written mostly in C. Every program and driver in a Mac, as in Windows and Linux computers, is running on a C-powered kernel.&lt;/p&gt;

&lt;h2 id=&quot;mobile&quot;&gt;Mobile&lt;/h2&gt;

&lt;p&gt;iOS, Android and Windows Phone kernels are also written in C. They are just mobile adaptations of existing Mac OS, Linux and Windows kernels. So smartphones you use every day are running on a C kernel.
&lt;img src=&quot;/blog/c_blogimgs/cblogimg1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Operating System Kernels Written in C&lt;/p&gt;

&lt;h2 id=&quot;databases&quot;&gt;Databases&lt;/h2&gt;

&lt;p&gt;The world’s most popular databases, including Oracle Database, MySQL, MS SQL Server, and PostgreSQL, are coded in C (the first three of them actually both in C and C++).&lt;/p&gt;

&lt;p&gt;Databases are used in all kind of systems: financial, government, media, entertainment, telecommunications, health, education, retail, social networks, web, and the like.
&lt;img src=&quot;/blog/c_blogimgs/cblogimg2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Databases Powered by C&lt;/p&gt;

&lt;h2 id=&quot;3d-movies&quot;&gt;3D Movies&lt;/h2&gt;

&lt;p&gt;3D movies are created with applications that are generally written in C and C++. Those applications need to be very efficient and fast, since they handle a huge amount of data and do many calculations per second. The more efficient they are, the less time it takes for the artists and animators to generate the movie shots, and the more money the company saves.&lt;/p&gt;

&lt;h2 id=&quot;embedded-systems&quot;&gt;Embedded Systems&lt;/h2&gt;

&lt;p&gt;Imagine that you wake up one day and go shopping. The alarm clock that wakes you up is likely programmed in C. Then you use your microwave or coffee maker to make your breakfast. They are also embedded systems and therefore are probably programmed in C. You turn on your TV or radio while you eat your breakfast. Those are also embedded systems, powered by C. When you open your garage door with the remote control you are also using an embedded system that is most likely programmed in C.&lt;/p&gt;

&lt;p&gt;Then you get into your car. If it has the following features, also programmed in C:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;automatic transmission&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;tire pressure detection systems&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;sensors (oxygen, temperature, oil level, etc.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;memory for seats and mirror settings.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;dashboard display&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;anti-lock brakes&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;automatic stability control&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;cruise control&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;climate control&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;child-proof locks&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;keyless entry&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;heated seats&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;airbag control&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You get to the store, park your car and go to a vending machine to get a soda. What language did they use to program this vending machine? Probably C. Then you buy something at the store. The cash register is also programmed in C. And when you pay with your credit card? You guessed it: the credit card reader is, again, likely programmed in C.&lt;/p&gt;

&lt;p&gt;All those devices are embedded systems. They are like small computers that have a microcontroller/microprocessor inside that is running a program, also called firmware, on embedded devices. That program must detect key presses and act accordingly, and also display information to the user. For example, the alarm clock must interact with the user, detecting what button the user is pressing and, sometimes, how long it is being pressed, and program the device accordingly, all while displaying to the user the relevant information. The anti-lock brake system of the car, for example, must be able to detect sudden locking of the tires and act to release the pressure on the brakes for a small period of time, unlocking them, and thereby preventing uncontrolled skidding. All those calculations are done by a programmed embedded system.&lt;/p&gt;

&lt;p&gt;Although the programming language used on embedded systems can vary from brand to brand, they are most commonly programmed in the C language, due to the language’s features of flexibility, efficiency, performance, and closeness to the hardware.
&lt;img src=&quot;/blog/c_blogimgs/cblogimg3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Embedded Systems are Often Written in C&lt;/p&gt;

&lt;h2 id=&quot;why-is-the-c-programming-language-still-used&quot;&gt;Why is the C Programming Language Still Used?&lt;/h2&gt;

&lt;p&gt;There are many programming languages, today, that allow developers to be more productive than with C for different kinds of projects. There are higher level languages that provide much larger built-in libraries that simplify working with JSON, XML, UI, web pages, client requests, database connections, media manipulation, and so on.&lt;/p&gt;

&lt;p&gt;But despite that, there are plenty of reasons to believe that C programming will remain active for a long time.&lt;/p&gt;

&lt;p&gt;In programming languages one size does not fit all. Here are some reasons that C is unbeatable, and almost mandatory, for certain applications.&lt;/p&gt;

&lt;h2 id=&quot;portability-and-efficiency&quot;&gt;Portability and Efficiency&lt;/h2&gt;

&lt;p&gt;C is almost a portable assembly language. It is as close to the machine as possible while it is almost universally available for existing processor architectures. There is at least one C compiler for almost every existent architecture. And nowadays, because of highly optimized binaries generated by modern compilers, it’s not an easy task to improve on their output with hand written assembly.&lt;/p&gt;

&lt;p&gt;Such is its portability and efficiency that “compilers, libraries, and interpreters of other programming languages are often implemented in C”. Interpreted languages like Python, Ruby, and PHP have their primary implementations written in C. It is even used by compilers for other languages to communicate with the machine. For example, C is the intermediate language underlying Eiffel and Forth. This means that, instead of generating machine code for every architecture to be supported, compilers for those languages just generate intermediate C code, and the C compiler handles the machine code generation.&lt;/p&gt;

&lt;p&gt;C has also become a lingua franca for communicating between developers. As Alex Allain, Dropbox Engineering Manager and creator of Cprogramming.com, puts it:&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;c-is-a-great-language-for-expressing-common-ideas-in-programming-in-a-way-that-most-people-are-comfortable-with-moreover-a-lot-of-the-principles-used-in-c--for-instance-argc-and-argv-for-command-line-parameters-as-well-as-loop-constructs-and-variable-types--will-show-up-in-a-lot-of-other-languages-you-learn-so-youll-be-able-to-talk-to-people-even-if-they-dont-know-c-in-a-way-thats-common-to-both-of-you&quot;&gt;C is a great language for expressing common ideas in programming in a way that most people are comfortable with. Moreover, a lot of the principles used in C – for instance, argc and argv for command line parameters, as well as loop constructs and variable types – will show up in a lot of other languages you learn so you’ll be able to talk to people even if they don’t know C in a way that’s common to both of you.&lt;/h3&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;memory-manipulation&quot;&gt;Memory Manipulation&lt;/h2&gt;

&lt;p&gt;Arbitrary memory address access and pointer arithmetic is an important feature that makes C a perfect fit for system programming (operating systems and embedded systems).&lt;/p&gt;

&lt;p&gt;At the hardware/software boundary, computer systems and microcontrollers map their peripherals and I/O pins into memory addresses. System applications must read and write to those custom memory locations to communicate with the world. So C’s ability to manipulate arbitrary memory addresses is imperative for system programming.&lt;/p&gt;

&lt;p&gt;A microcontroller could be architected, for example, such that the byte in memory address 0x40008000 will be sent by the universal asynchronous receiver/transmitter (or UART, a common hardware component for communicating with peripherals) every time bit number 4 of address 0x40008001 is set to 1, and that after you set that bit, it will be automatically unset by the peripheral.&lt;/p&gt;

&lt;p&gt;This would be the code for a C function that sends a byte through that UART:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;#define UART_BYTE *(char *)0x40008000
#define UART_SEND *(volatile char *)0x40008001 |= 0x08

void send_uart(char byte)
{
UART_BYTE = byte; // write byte to 0x40008000 address
UART_SEND; // set bit number 4 of address 0x40008001
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first line of the function will be expanded to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;*(char *)0x40008000 = byte;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This line tells the compiler to interpret the value 0x40008000 as a pointer to a char, then to dereference (give the value pointed to by) that pointer (with the leftmost * operator) and finally to assign byte value to that dereferenced pointer. In other words: write the value of variable byte to memory address 0x40008000.&lt;/p&gt;

&lt;p&gt;The next line will be expanded to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;*(volatile char *)0x40008001 |= 0x08;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this line, we perform a bitwise OR operation on the value at address &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\0x40008001&lt;/code&gt; and the value &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x08&lt;/code&gt; (00001000 in binary, i.e., a 1 in bit number 4), and save the result back to address &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x40008001&lt;/code&gt;. In other words: we set bit 4 of the byte that is at address &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x40008001&lt;/code&gt;. We also declare that the value at address &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x40008001&lt;/code&gt; is volatile. This tells the compiler that this value may be modified by processes external to our code, so the compiler won’t make any assumptions about the value in that address after writing to it. (In this case, this bit is unset by the UART hardware just after we set it by software.) This information is important for the compiler’s optimizer. If we did this inside a for loop, for example, without specifying that the value is volatile, the compiler might assume this value never changes after being set, and skip executing the command after the first loop.&lt;/p&gt;

&lt;h2 id=&quot;deterministic-usage-of-resources&quot;&gt;Deterministic Usage of Resources&lt;/h2&gt;

&lt;p&gt;A common language feature that system programming cannot rely on is garbage collection, or even just dynamic allocation for some embedded systems. Embedded applications are very limited in time and memory resources. They are often used for real-time systems, where a non-deterministic call to the garbage collector cannot be afforded. And if dynamic allocation cannot be used because of the lack of memory, it is very important to have other mechanisms of memory management, like placing data in custom addresses, as C pointers allow. Languages that depend heavily on dynamic allocation and garbage collection wouldn’t be a fit for resource-limited systems.&lt;/p&gt;

&lt;h2 id=&quot;code-size&quot;&gt;Code Size&lt;/h2&gt;

&lt;p&gt;C has a very small runtime. And the memory footprint for its code is smaller than for most other languages.&lt;/p&gt;

&lt;p&gt;When compared to C++, for example, a C-generated binary that goes to an embedded device is about half the size of a binary generated by similar C++ code. One of the main causes for that is exceptions support.&lt;/p&gt;

&lt;p&gt;Exceptions are a great tool added by C++ over C, and, if not triggered and smartly implemented, they have practically no execution time overhead (but at the cost of increasing the code size).&lt;/p&gt;

&lt;p&gt;Let’s see an example in C++:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;// Class A declaration. Methods defined somewhere else;
class A
{
public:
A(); // Constructor
~A(); // Destructor (called when the object goes out of scope or is deleted)
void myMethod(); // Just a method
};

// Class B declaration. Methods defined somewhere else;

class B
{
public:
B(); // Constructor
~B(); // Destructor
void myMethod(); // Just a method
};

// Class C declaration. Methods defined somewhere else;
class C
{
public:
C(); // Constructor
~C(); // Destructor
void myMethod(); // Just a method
};

void myFunction()
{
A a; // Constructor a.A() called. (Checkpoint 1)

{
B b; // Constructor b.B() called. (Checkpoint 2)
b.myMethod(); // (Checkpoint 3)
} // b.~B() destructor called. (Checkpoint 4)

{
C c; // Constructor c.C() called. (Checkpoint 5)
c.myMethod(); // (Checkpoint 6)
} // c.~C() destructor called. (Checkpoint 7)

a.myMethod(); // (Checkpoint 8)
} // a.~A() destructor called. (Checkpoint 9)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Methods of A, B and C classes are defined somewhere else (for example in other files). Therefore the compiler cannot analyze them and cannot know if they will throw exceptions. So it must prepare to handle exceptions thrown from any of their constructors, destructors, or other method calls. Destructors should not throw (very bad practice), but the user could throw anyway, or they could throw indirectly by calling some function or method (explicitly or implicitly) that throws an exception.&lt;/p&gt;

&lt;p&gt;If any of the calls in myFunction throw an exception, the stack unwinding mechanism must be able to call all the destructors for the objects that were already constructed. One implementation for the stack unwinding mechanism will use the return address of the last call from this function to verify the “checkpoint number” of the call that triggered the exception (this is the simple explanation). It does this by making use of an auxiliary autogenerated function (a kind of look-up table) that will be used for stack unwinding in case an exception is thrown from the body of that function, which will be similar to this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;// Possible autogenerated function

void  autogeneratedStackUnwindingFor_myFunction(int  checkpoint)
{
switch (checkpoint)
{
// case 1 and 9: do nothing;
case 3: b.~B(); goto destroyA; // jumps to location of destroyA label
case 6: c.~C(); // also goes to destroyA as that is the next line
destroyA: // label
case 2: case 4: case 5: case 7: case 8: a.~A();
}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the exception is thrown from checkpoints 1 and 9, no object needs destruction. For checkpoint 3, b and a must be destructed. For checkpoint 6, c and a must be destructed. In all cases the destruction order must be respected. For checkpoints 2, 4, 5, 7, and 8, only object a needs to be destructed.&lt;/p&gt;

&lt;p&gt;This auxiliary function adds size to the code. This is part of the space overhead that C++ adds to C. Many embedded applications cannot afford this extra space. Therefore, C++ compilers for embedded systems often have a flag to disable exceptions. Disabling exceptions in C++ is not free, because the Standard Template Library heavily relies on exceptions to inform errors. Using this modified scheme, without exceptions, requires more training for C++ developers to detect possible issues or find bugs.&lt;/p&gt;

&lt;p&gt;And, we are talking about C++, a language whose principle is: “You don’t pay for what you don’t use.” This increase on binary size gets worse for other languages that add additional overhead with other features that are very useful but cannot be afforded by embedded systems. While C does not give you the use of these extra features, it allows a much more compact code footprint than the other languages.&lt;/p&gt;

&lt;h2 id=&quot;reasons-to-learn-c&quot;&gt;Reasons to Learn C&lt;/h2&gt;

&lt;p&gt;C is not a hard language to learn, so all the benefits from learning it will come quite cheap. Let’s see some of those benefits.&lt;/p&gt;

&lt;h3 id=&quot;lingua-franca&quot;&gt;Lingua Franca:&lt;/h3&gt;
&lt;p&gt;As already mentioned, C is a lingua franca for developers. Many implementations of new algorithms in books or on the internet are first (or only) made available in C by their authors. This gives the maximum possible portability for the implementation. I’ve seen programmers struggling on the internet to rewrite a C algorithm to other programming languages because he or she didn’t know very basic concepts of C.&lt;/p&gt;

&lt;p&gt;Be aware that C is an old and widespread language, so you can find all kind of algorithms written in C around the web. Therefore you’ll very likely benefit from knowing this language.&lt;/p&gt;

&lt;h2 id=&quot;understand-the-machine-think-in-c&quot;&gt;Understand the Machine (Think in C)&lt;/h2&gt;

&lt;p&gt;When we discuss the behavior of certain portions of code, or certain features of other languages, with colleagues, we end up “talking in C:” Is this portion passing a “pointer” to the object or copying the entire object? Could any “cast” be happening here? And so on.&lt;/p&gt;

&lt;p&gt;We would rarely discuss (or think) about the assembly instructions that a portion of code is executing when analyzing the behavior of a portion of code of a high level language. Instead, when discussing what the machine is doing, we speak (or think) pretty clearly in C.&lt;/p&gt;

&lt;p&gt;Moreover, if you can’t stop and think that way about what you are doing, you may end up programming with some sort of superstition about how (magically) things are done.
&lt;img src=&quot;/blog/c_blogimgs/cblogimg4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Think Like the Machine with C&lt;/p&gt;

&lt;h2 id=&quot;work-on-many-interesting-c-projects&quot;&gt;Work on Many Interesting C Projects&lt;/h2&gt;

&lt;p&gt;Many interesting projects, from big database servers or operating system kernels, to small embedded applications you can even do at home for your personal satisfaction and fun, are done in C. There is no reason to stop doing things you may love for the single reason that you don’t know an old and small, but strong and time-proven programming language like C.
&lt;img src=&quot;/blog/c_blogimgs/cblogimg5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Work on Cool Projects with C&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The Illuminati doesn’t run the world. C programmers do.&lt;/p&gt;

&lt;p&gt;The C programming language doesn’t seem to have an expiration date. It’s closeness to the hardware, great portability and deterministic usage of resources makes it ideal for low level development for such things as operating system kernels and embedded software. Its versatility, efficiency and good performance makes it an excellent choice for high complexity data manipulation software, like databases or 3D animation. The fact that many programming languages today are better than C for their intended use doesn’t mean that they beat C in all areas. C is still unsurpassed when performance is the priority.&lt;/p&gt;

&lt;p&gt;The world is running on C-powered devices. We use these devices every day whether we realize it or not. C is the past, the present, and, as far as we can see, still the future for many areas of software.&lt;/p&gt;

</content>
		</entry>
	
		<entry>
			<title>So long</title>
			<link href="http://alifertah.github.io/school/2022/05/11/so-long.html"/>
			<updated>2022-05-11T00:00:00+01:00</updated>
			<id>http://alifertah.github.io/school/2022/05/11/so-long</id>
			<content type="html">&lt;h1 id=&quot;blog-removed-idk-why&quot;&gt;blog removed idk why&lt;/h1&gt;
</content>
		</entry>
	
		<entry>
			<title>Blog Bdarija</title>
			<link href="http://alifertah.github.io/school/2022/04/07/denya.html"/>
			<updated>2022-04-07T00:00:00+00:00</updated>
			<id>http://alifertah.github.io/school/2022/04/07/denya</id>
			<content type="html">&lt;h1 id=&quot;blog-removed&quot;&gt;blog removed&lt;/h1&gt;
</content>
		</entry>
	
		<entry>
			<title>what we do wrong</title>
			<link href="http://alifertah.github.io/school/2022/03/30/what-we-do-wrong.html"/>
			<updated>2022-03-30T00:00:00+00:00</updated>
			<id>http://alifertah.github.io/school/2022/03/30/what-we-do-wrong</id>
			<content type="html">&lt;h2 id=&quot;git-the-right-way&quot;&gt;Git the right way&lt;/h2&gt;

&lt;p&gt;This tool is abused by many students, this is my second fav software ever&lt;/p&gt;

&lt;p&gt;and I feel bad when the most important tool in devpack used&lt;/p&gt;

&lt;p&gt;in arbitrary way. here is some common points I noticed And I took personally:&lt;/p&gt;

&lt;h3 id=&quot;git-add-&quot;&gt;git add .&lt;/h3&gt;

&lt;p&gt;It’s easier to add files to stage area using this approach. just stage everything .DStore and all other useless garbage files.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOOOOOOOOOOOOO Please&lt;/strong&gt;, just add files that are neccessary for your project. you might be to lazy to stage them one by one,&lt;/p&gt;

&lt;p&gt;just use Vscode or to be fast use &lt;a href=&quot;https://github.com/tpope/vim-fugitive&quot;&gt;Fugitive plugin&lt;/a&gt; in vim.&lt;/p&gt;

&lt;p&gt;With this you can make sure that you only have neccessary files in your repo, and give you a better understanding for&lt;/p&gt;

&lt;p&gt;changes you made so you can have a well-written commit message.&lt;/p&gt;

&lt;h3 id=&quot;git-status-n-git-commit--m-whatever&quot;&gt;git status \n git commit -m “whatever”&lt;/h3&gt;

&lt;p&gt;I can’t call this ‘abuse’ but it’s much better to just use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit&lt;/code&gt; and this will show you a useful status in your&lt;/p&gt;

&lt;p&gt;favorite editor(vim), write down a useful message, save&amp;amp;quit and your commit will be done.&lt;/p&gt;

&lt;p&gt;isn’t it much easier to write a commit message while you can see files that you changed ?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;this will open vim where you can write your commit msg:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;:q -&amp;gt; quit to abort commit&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;:wq -&amp;gt; save&amp;amp;quit to save commit&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;my useful commit message here

# Please enter the commit message for your changes. Lines starting

# with &apos;#&apos; will be ignored, and an empty message aborts the commit.

#

# On branch main

#

# Initial commit

#

# Changes to be committed:

# new file: file1

# new file: file2

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;git-clone--mv-ur-files&quot;&gt;git clone &amp;amp;&amp;amp; mv ur files&lt;/h3&gt;

&lt;p&gt;When they finished thier project. most students realise that they didn’t link it with vogsphere.&lt;/p&gt;

&lt;p&gt;They do what I call a smart move, just clone it and move file from project to cloned repo.&lt;/p&gt;

&lt;p&gt;Guess what stupid? git remote is much easier.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;myproject

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git remote add intra &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;link &lt;/span&gt;to vogsphere repo]

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git push &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; intra master

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now you can look for evalutors.&lt;/p&gt;

&lt;h3 id=&quot;gitignore&quot;&gt;gitignore&lt;/h3&gt;

&lt;p&gt;This file is freaking useful to avoid staging useless files.&lt;/p&gt;

&lt;p&gt;Files you might want to put in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
.gitignore

*.o

build/

libft.a # or any binary file you have in your project

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;makefile-the-same-everywhere&quot;&gt;Makefile (the same everywhere)&lt;/h2&gt;

&lt;p&gt;Take makefile from prevouis project change your source files and Header file. run it, and magically it works.&lt;/p&gt;

&lt;p&gt;Hell noooooo, makefile has a lot to learn.&lt;/p&gt;

&lt;h3 id=&quot;no-source-files-in-makefile&quot;&gt;No source files in makefile&lt;/h3&gt;

&lt;p&gt;You should never put source files in your makefile, why? because you will never need them. your are just risking deleting them&lt;/p&gt;

&lt;p&gt;with a stupid mistake that we as developer like to do.&lt;/p&gt;

&lt;p&gt;so instead of this&lt;/p&gt;

&lt;div class=&quot;language-makefile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nv&quot;&gt;SRC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; main.c lkiks.c

&lt;span class=&quot;nv&quot;&gt;OBJ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$(&lt;/span&gt;SRC:.c&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;.o&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;what about this smart genius idea:&lt;/p&gt;

&lt;div class=&quot;language-makefile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nv&quot;&gt;OBJ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; main.o lkiks.o

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/torvalds/linux/blob/master/fs/fuse/Makefile&quot;&gt;Example from linux kernel&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;object-file-in-root-directory&quot;&gt;Object file? In root directory???&lt;/h3&gt;

&lt;p&gt;I hate to see object files in the root directory, running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make fclean&lt;/code&gt; everytime you are looking&lt;/p&gt;

&lt;p&gt;for a file, this elimante the role of makefile in first place(relink).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I am sure that this is the best way but at least I think it works almost perfectly for small projects.&lt;/p&gt;

&lt;p&gt;Your object files should be inside a folder called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
build

├── checker

│ ├── checker.o

│ └── exec.o

├── common

│ ├── stack

│ │ ├── instructions.o

│ │ ├── op.o

│ │ ├── swap.o

│ │ ├── swipedown.o

│ │ └── swipeup.o

│ ├── str.o

│ └── utils.o

└── pushswap

├── main.o

├── opti.o

├── sort_5.o

├── stack_sort.o

└── utils

└── misc.o

checker

├── checker.c

├── exec.c

└── inc

└── checker.h

common

├── stack

│ ├── instructions.c

│ ├── op.c

│ ├── swap.c

│ ├── swipedown.c

│ └── swipeup.c

├── str.c

└── utils.c

pushswap

├── inc

│ └── stack.h

├── main.c

├── opti.c

├── sort_5.c

├── stack_sort.c

└── utils

└── misc.c

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This &lt;a href=&quot;https://gitlab.com/abellaismail/pushswap/-/blob/main/Makefile&quot;&gt;my Makefile&lt;/a&gt; for pushswap project;&lt;/p&gt;

&lt;p&gt;And it’s a great example for reusing component in your project too.&lt;/p&gt;

&lt;h2 id=&quot;learn-shell&quot;&gt;Learn shell&lt;/h2&gt;

&lt;p&gt;In the first 2 days in the pool you learned about shell. but most of student don’t apply what they learned&lt;/p&gt;

&lt;p&gt;to do repeatable task.&lt;/p&gt;

&lt;p&gt;Ohmyzsh comes with great start point for you, but I always recommand to have your own configuration cuz why not.&lt;/p&gt;

&lt;p&gt;here is &lt;a href=&quot;https://github.com/abellaismail7/.dotfiles/blob/main/.config/zsh/.zshrc&quot;&gt;my minimal configuration&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;if you need inspiration.&lt;/p&gt;

&lt;h3 id=&quot;example&quot;&gt;Example&lt;/h3&gt;

&lt;p&gt;Here is some aliases you might need:&lt;/p&gt;

&lt;p&gt;open &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.zshrc&lt;/code&gt; and add this lines&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;git&apos;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;git add&apos;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;gs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;git status&apos;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;gc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;git checkout&apos;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;gco&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;git commit&apos;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;gp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;git push&apos;&lt;/span&gt;

  

&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;vim&apos;&lt;/span&gt;

  

&lt;span class=&quot;nb&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;ls -lah&apos;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;ls -lAh&apos;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;ls --color=auto&apos;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;md&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;mkdir -p&apos;&lt;/span&gt;

  

&lt;span class=&quot;nb&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; -&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;cd -&apos;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; ..&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;cd ..&apos;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; ...&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;cd ../..&apos;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;touch &lt;/span&gt;file1 file2 &lt;span class=&quot;c&quot;&gt;# instead of&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ga file1 file2 &lt;span class=&quot;c&quot;&gt;# instead of git add&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gs &lt;span class=&quot;c&quot;&gt;# instead of git status&lt;/span&gt;

On branch main

  

No commits yet

  

Changes to be committed:

&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;use &lt;span class=&quot;s2&quot;&gt;&quot;git rm --cached &amp;lt;file&amp;gt;...&quot;&lt;/span&gt; to unstage&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

new file: file1

new file: file2

  

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gc &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;even-c&quot;&gt;Even C?&lt;/h2&gt;

&lt;p&gt;While C is the core of the cursus there some common problems I and students made and still.&lt;/p&gt;

&lt;h3 id=&quot;learn-c-not-norm&quot;&gt;Learn C not norm&lt;/h3&gt;

&lt;p&gt;In general I like the norm. but most of new student never heard of a lot of keywords/functions in c&lt;/p&gt;

&lt;p&gt;You might not know that there is scanf to read from stdin. You might not know about for loops.&lt;/p&gt;

&lt;p&gt;Some students never heard of allowed features in c like struct/enums/union …;&lt;/p&gt;

&lt;p&gt;Investing some time learning the practical C will help you write tests faster saving you some time.&lt;/p&gt;

&lt;h3 id=&quot;never-use-write-directly-or-waste-your-time&quot;&gt;Never use write directly (or waste your time)&lt;/h3&gt;

&lt;p&gt;Prevent students from using stdio functions is just a genuis idea.&lt;/p&gt;

&lt;p&gt;while we have functions like open, read and write that are intract directly with system …&lt;/p&gt;

&lt;p&gt;but using write directly is a bad idea cuz it’s error-prone, we developers like to make dump mistakes.&lt;/p&gt;

&lt;p&gt;for me I like to use ` ft_putstrfd(int fd, char *s)`.&lt;/p&gt;

&lt;h3 id=&quot;programming-is-like-mariage-you-are-always-wrong&quot;&gt;Programming is like mariage, you are always wrong.&lt;/h3&gt;

&lt;p&gt;You can insult iMac and c as you can, but most of the time you doing something wrong.&lt;/p&gt;

&lt;p&gt;we are using c89 compiled using gcc which is one of the most mature projects.&lt;/p&gt;

&lt;p&gt;written by genuis people so It’s more likely you doing it wrong.&lt;/p&gt;

&lt;h3 id=&quot;once-it-works-dont-touch-it-mindset&quot;&gt;Once it works don’t touch it mindset.&lt;/h3&gt;

&lt;p&gt;What a pure bad mindset to have as developer.&lt;/p&gt;

&lt;p&gt;refactoring(the process of making code better) is one of the most important skills as software eng.&lt;/p&gt;

&lt;p&gt;here is a qoute from kent beck&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Make it work, make it right, make it fast.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;– Kent Beck&lt;/p&gt;

&lt;p&gt;I highly recommand two books:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882&quot;&gt;clean code, uncle bob&lt;/a&gt; : This will teach you how to write an understable, readable code.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://martinfowler.com/books/refactoring.html&quot;&gt;Refactoring, martin fowler&lt;/a&gt; : This will teach you how to rewrite part of you code to be better and faster.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;in-the-end&quot;&gt;In The end&lt;/h2&gt;

&lt;p&gt;This is what I think. If you have a different opinion we can discuss it in my twitter account (link below)&lt;/p&gt;

&lt;p&gt;If you want to add anything to this feel free to pull request in &lt;a href=&quot;https://github.com/alifertah/alifertah.github.io&quot;&gt;this repo&lt;/a&gt;.&lt;/p&gt;
</content>
		</entry>
	

</feed>
